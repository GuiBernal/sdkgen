name: release
on:
  release:
    types: [published]
jobs:
  parser:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 16.x
          registry-url: https://registry.npmjs.org
      - run: cp LICENSE packages/parser/
      - run: npm install
      - run: npx lerna bootstrap
      - run: |
          npm install -g json && json -I -f package.json -e '
            this.version = "${{ github.ref }}".replace("refs/tags/", "");
            this.main = "dist/src/index.js";
            this.types = "dist/src/index.d.ts";
            for (const pkg in this.dependencies)
              if (this.dependencies[pkg].startsWith("file:../"))
                this.dependencies[pkg] = this.version;
          '
        working-directory: ./packages/parser
      - run: npm run build
        working-directory: ./packages/parser
      - run: npm publish
        working-directory: ./packages/parser
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  browser-runtime:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 16.x
          registry-url: https://registry.npmjs.org
      - run: cp LICENSE packages/browser-runtime/
      - run: npm install
      - run: npx lerna bootstrap
      - run: |
          npm install -g json && json -I -f package.json -e '
            this.version = "${{ github.ref }}".replace("refs/tags/", "");
            this.main = "dist/src/index.js";
            this.types = "dist/src/index.d.ts";
            for (const pkg in this.dependencies)
              if (this.dependencies[pkg].startsWith("file:../"))
                this.dependencies[pkg] = this.version;
          '
        working-directory: ./packages/browser-runtime
      - run: npm run build
        working-directory: ./packages/browser-runtime
      - run: npm publish
        working-directory: ./packages/browser-runtime
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  dart-runtime:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 12.x
      - uses: subosito/flutter-action@v1
        with:
          flutter-version: 2.5.x
          channel: stable
      - run: cp LICENSE packages/dart-runtime/
      - run: flutter pub get
        working-directory: ./packages/dart-runtime
      - run: 'sed ''s/version: 0.0.0/version: ''$(echo "${{ github.ref }}" | cut -d''/'' -f3)''/'' -i pubspec.yaml'
        working-directory: ./packages/dart-runtime
      - run: mkdir -p $PUB_CACHE && echo "$PUB_CREDENTIALS" > $PUB_CACHE/credentials.json && flutter pub pub publish -v -f
        working-directory: ./packages/dart-runtime
        env:
          PUB_CACHE: ../pub-cache
          PUB_CREDENTIALS: ${{ secrets.PUB_CREDENTIALS }}

  typescript-generator:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 16.x
          registry-url: https://registry.npmjs.org
      - run: cp LICENSE packages/typescript-generator/
      - run: npm install
      - run: npx lerna bootstrap
      - run: |
          npm install -g json && json -I -f package.json -e '
            this.version = "${{ github.ref }}".replace("refs/tags/", "");
            this.main = "dist/src/index.js";
            this.types = "dist/src/index.d.ts";
            for (const pkg in this.dependencies)
              if (this.dependencies[pkg].startsWith("file:../"))
                this.dependencies[pkg] = this.version;
          '
        working-directory: ./packages/typescript-generator
      - run: npm run build
        working-directory: ./packages/typescript-generator
      - run: npm publish
        working-directory: ./packages/typescript-generator
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  csharp-generator:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 16.x
          registry-url: https://registry.npmjs.org
      - run: cp LICENSE packages/csharp-generator/
      - run: npm install
      - run: npx lerna bootstrap
      - run: |
          npm install -g json && json -I -f package.json -e '
            this.version = "${{ github.ref }}".replace("refs/tags/", "");
            this.main = "dist/src/index.js";
            this.types = "dist/src/index.d.ts";
            for (const pkg in this.dependencies)
              if (this.dependencies[pkg].startsWith("file:../"))
                this.dependencies[pkg] = this.version;
          '
        working-directory: ./packages/csharp-generator
      - run: npm run build
        working-directory: ./packages/csharp-generator
      - run: npm publish
        working-directory: ./packages/csharp-generator
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  kotlin-generator:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 16.x
          registry-url: https://registry.npmjs.org
      - run: cp LICENSE packages/kotlin-generator/
      - run: npm install
      - run: npx lerna bootstrap
      - run: |
          npm install -g json && json -I -f package.json -e '
            this.version = "${{ github.ref }}".replace("refs/tags/", "");
            this.main = "dist/src/index.js";
            this.types = "dist/src/index.d.ts";
            for (const pkg in this.dependencies)
              if (this.dependencies[pkg].startsWith("file:../"))
                this.dependencies[pkg] = this.version;
          '
        working-directory: ./packages/kotlin-generator
      - run: npm run build
        working-directory: ./packages/kotlin-generator
      - run: npm publish
        working-directory: ./packages/kotlin-generator
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  swift-generator:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          registry-url: https://registry.npmjs.org
      - run: cp LICENSE packages/swift-generator/
      - run: npm install
      - run: npx lerna bootstrap
      - run: |
          npm install -g json && json -I -f package.json -e '
            this.version = "${{ github.ref }}".replace("refs/tags/", "");
            this.main = "dist/src/index.js";
            this.types = "dist/src/index.d.ts";
            for (const pkg in this.dependencies)
              if (this.dependencies[pkg].startsWith("file:../"))
                this.dependencies[pkg] = this.version;
          '
        working-directory: ./packages/swift-generator
      - run: npm run build
        working-directory: ./packages/swift-generator
      - run: npm publish
        working-directory: ./packages/swift-generator
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  dart-generator:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 16.x
          registry-url: https://registry.npmjs.org
      - run: cp LICENSE packages/dart-generator/
      - run: npm install
      - run: npx lerna bootstrap
      - run: |
          npm install -g json && json -I -f package.json -e '
            this.version = "${{ github.ref }}".replace("refs/tags/", "");
            this.main = "dist/src/index.js";
            this.types = "dist/src/index.d.ts";
            for (const pkg in this.dependencies)
              if (this.dependencies[pkg].startsWith("file:../"))
                this.dependencies[pkg] = this.version;
          '
        working-directory: ./packages/dart-generator
      - run: npm run build
        working-directory: ./packages/dart-generator
      - run: npm publish
        working-directory: ./packages/dart-generator
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  cli:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 16.x
          registry-url: https://registry.npmjs.org
      - run: cp LICENSE packages/cli/
      - run: npm install
      - run: npx lerna bootstrap
      - run: |
          npm install -g json && json -I -f package.json -e '
            this.version = "${{ github.ref }}".replace("refs/tags/", "");
            this.main = "dist/src/index.js";
            this.types = "dist/src/index.d.ts";
            for (const pkg in this.dependencies)
              if (this.dependencies[pkg].startsWith("file:../"))
                this.dependencies[pkg] = this.version;
          '
        working-directory: ./packages/cli
      - run: npm run build
        working-directory: ./packages/cli
      - run: npm publish
        working-directory: ./packages/cli
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  playground:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 16.x
          registry-url: https://registry.npmjs.org
      - run: cp LICENSE packages/playground/
      - run: npm install
      - run: npx lerna bootstrap
      - run: npm install -g json && bash .ci.sh
        working-directory: ./packages/playground
      - run: npm run build
        working-directory: ./packages/playground
        env:
          NODE_ENV: production
      - run: |
          npm install -g json && json -I -f package.json -e '
            this.version = "${{ github.ref }}".replace("refs/tags/", "");
            this.main = "dist/src/index.js";
            this.types = "dist/src/index.d.ts";
            delete this.dependencies.tslib;
            for (const pkg in this.dependencies)
              if (this.dependencies[pkg].startsWith("file:../"))
                this.dependencies[pkg] = this.version;
          '
        working-directory: ./packages/playground
      - run: npm publish
        working-directory: ./packages/playground
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  android-runtime:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: sed -i -e "s/versionName \"1.0\"/versionName \"$(echo ${{ github.ref }} | cut -d'/' -f3)\"/g" build.gradle
        working-directory: ./packages/android-runtime/runtime
      - run: sed -i -e "s/version = '1.0.0'/version = '$(echo ${{ github.ref }} | cut -d'/' -f3)'/g" bintray.gradle
        working-directory: ./packages/android-runtime/runtime
      - run: sed -i -e "s/versionCode 1/versionCode $(date +%s)/g" build.gradle
        working-directory: ./packages/android-runtime/runtime
      - uses: giorgosneokleous93/docker-multicommand-android@v1.0.0
        with:
          workingdir: "./android-runtime/"
          command1: "./gradlew test install bintrayUpload"
        env:
          BINTRAY_USER: ${{ secrets.BINTRAY_USER }}
          BINTRAY_API_KEY: ${{ secrets.BINTRAY_API_KEY }}

  node-runtime:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 16.x
          registry-url: https://registry.npmjs.org
      - run: cp LICENSE packages/node-runtime/
      - run: npm install
      - run: npx lerna bootstrap
      - run: |
          npm install -g json && json -I -f package.json -e '
            this.version = "${{ github.ref }}".replace("refs/tags/", "");
            this.main = "dist/src/index.js";
            this.types = "dist/src/index.d.ts";
            for (const pkg in this.dependencies)
              if (this.dependencies[pkg].startsWith("file:../"))
                this.dependencies[pkg] = this.version;
          '
        working-directory: ./packages/node-runtime
      - run: npm run build
        working-directory: ./packages/node-runtime
      - run: npm publish
        working-directory: ./packages/node-runtime
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  dotnet-runtime:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x
      - uses: actions/setup-node@v1
        with:
          node-version: 16.x
      - run: cp LICENSE packages/playground/
      - run: npm install
      - run: npx lerna bootstrap
      - run: npm run build
        working-directory: ./packages/playground
        env:
          NODE_ENV: production
      - run: dotnet pack -c:Release -p:PackageVersion=$(echo \"${{ github.ref }}\" | cut -d'/' -f3)
        working-directory: ./packages/dotnet-runtime
      - run: dotnet nuget push bin/**/*.nupkg -k $NUGET_TOKEN -s https://api.nuget.org/v3/index.json
        working-directory: ./packages/dotnet-runtime
        env:
          NUGET_TOKEN: ${{ secrets.NUGET_TOKEN }}

  vscode-ext:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
      - run: |
          npm install -g json && json -I -f package.json -e '
            this.version = "${{ github.ref }}".replace("refs/tags/", "");
          '
        working-directory: ./vscode-ext
      - run: npm install -g vsce
      - run: vsce publish -p ${{ secrets.VSCE_TOKEN }}
        working-directory: ./vscode-ext
